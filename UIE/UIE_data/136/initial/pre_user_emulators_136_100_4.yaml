1-1. selected_chart_types: !!python/tuple
- '* Bar chart

  * Scatter plot

  * Stacked bar/column chart

  * Line chart

  * Histogram

  * Box chart'
- 1031
- 1005
- 26
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list> \n1. Text Annotations:\nDescription: Data-driven\
  \ text annotations display values linked to chart elements, such as data points\
  \ in a scatterplot. They draw attention to specific elements by highlighting their\
  \ values.\nPurpose: When only some elements are annotated, the intent is to focus\
  \ the viewer\u2019s attention on those before examining others.\nOther Uses: Non-data-driven\
  \ annotations can provide context, orientation, or editorial comments.\n3. Highlights:\n\
  Description: Highlights modify the appearance of chart elements (e.g., size, color)\
  \ to emphasize or reduce their importance.\nPurpose: Used to distinguish certain\
  \ elements from others, making them stand out visually\n<end of the annotation list>"
- 849
- 710
- 139
1-3. asking_user_emulator_for_initial_prompt: 'You are an expert user emulator.


  <start of data example format>

  {''../Extra_datas/data/136.csv'': {''summary'': {''Column'': [''id'', ''gender'',
  ''age'', ''hypertension'', ''heart_disease'', ''ever_married'', ''work_type'', ''Residence_type'',
  ''avg_glucose_level'', ''bmi'', ''smoking_status'', ''stroke''], ''Data Type'':
  [dtype(''int64''), dtype(''O''), dtype(''float64''), dtype(''int64''), dtype(''int64''),
  dtype(''O''), dtype(''O''), dtype(''O''), dtype(''float64''), dtype(''float64''),
  dtype(''O''), dtype(''int64'')], ''Missing Values'': [0, 0, 0, 0, 0, 0, 0, 0, 0,
  201, 0, 0], ''Unique Values'': [5110, 3, 104, 2, 2, 2, 5, 2, 3979, 418, 4, 2]},
  ''sample_data'': {''id'': [9046, 51676, 31112], ''gender'': [''Male'', ''Female'',
  ''Male''], ''age'': [67.0, 61.0, 80.0], ''hypertension'': [0, 0, 0], ''heart_disease'':
  [1, 0, 1], ''ever_married'': [''Yes'', ''Yes'', ''Yes''], ''work_type'': [''Private'',
  ''Self-employed'', ''Private''], ''Residence_type'': [''Urban'', ''Rural'', ''Rural''],
  ''avg_glucose_level'': [228.69, 202.21, 105.92], ''bmi'': [36.6, nan, 32.5], ''smoking_status'':
  [''formerly smoked'', ''never smoked'', ''never smoked''], ''stroke'': [1, 1, 1]}}}

  <end of data example format>


  <start of data details format>

  Stroke Prediction Dataset

  health

  <end of data details format>


  Given a data format, imagine a chart that visualizes this data as the final output
  you want from the service provider.

  You need to imagine a chart with * Histogram that utilizes the data format.

  If there are multiple given data formats, imagine a chart with * Histogram that
  utilizes all the data formats.

  Since you are an amateur user, your instruction will be partially SUBJECTIVE and
  NOT DETAILED.

  Also, refer to the data details to create as practical and realistic instructions
  as possible.

  Instructions must reflect the context of the data.

  To emulate a real-world user your instruction should be 100 in size (word count).

  Your response should ONLY contain the user emulated instruction.

  Do not include anything else.'
1-4. total_chart_types:
- '* Box chart'
- '* Bar chart'
- '* Stacked bar/column chart'
- '* Scatter plot'
- '* Histogram'
- '* Line chart'
- '* Box chart'
- '* Bar chart'
- '* Stacked bar/column chart'
- '* Scatter plot'
- '* Histogram'
2. initial_prompt: !!python/tuple
- I want to see histograms for the age distribution from the stroke prediction dataset.
  Include gender-based segmentation to compare distributions between males, females,
  and others. Also, create additional histograms for avg_glucose_level and bmi, highlighting
  the differences between stroke and non-stroke patients. Make sure to handle missing
  bmi values appropriately in the visualizations. The charts should help understand
  if there are any apparent trends or patterns in the data regarding stroke occurrences
  related to age, glucose levels, and bmi. Show clear legends and labels for easy
  interpretation.
- 690
- 583
- 107
