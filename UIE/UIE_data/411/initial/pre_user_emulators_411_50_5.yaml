1-1. selected_chart_types: !!python/tuple
- '* Line chart

  * Scatter plot

  * Heatmap

  * Bar chart

  * Stacked area chart

  * Histogram

  * Box chart

  * Geographic heatmap'
- 2898
- 2865
- 33
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list> \n1. Text Annotations:\nDescription: Data-driven\
  \ text annotations display values linked to chart elements, such as data points\
  \ in a scatterplot. They draw attention to specific elements by highlighting their\
  \ values.\nPurpose: When only some elements are annotated, the intent is to focus\
  \ the viewer\u2019s attention on those before examining others.\nOther Uses: Non-data-driven\
  \ annotations can provide context, orientation, or editorial comments.\n3. Highlights:\n\
  Description: Highlights modify the appearance of chart elements (e.g., size, color)\
  \ to emphasize or reduce their importance.\nPurpose: Used to distinguish certain\
  \ elements from others, making them stand out visually\n<end of the annotation list>"
- 2714
- 2575
- 139
1-3. asking_user_emulator_for_initial_prompt: 'You are an expert user emulator.


  <start of data example format>

  {''../Extra_datas/data/411.csv'': {''summary'': {''Column'': [''Country Name'',
  ''Country Code'', ''Indicator Name'', ''Indicator Code'', ''1960'', ''1961'', ''1962'',
  ''1963'', ''1964'', ''1965'', ''1966'', ''1967'', ''1968'', ''1969'', ''1970'',
  ''1971'', ''1972'', ''1973'', ''1974'', ''1975'', ''1976'', ''1977'', ''1978'',
  ''1979'', ''1980'', ''1981'', ''1982'', ''1983'', ''1984'', ''1985'', ''1986'',
  ''1987'', ''1988'', ''1989'', ''1990'', ''1991'', ''1992'', ''1993'', ''1994'',
  ''1995'', ''1996'', ''1997'', ''1998'', ''1999'', ''2000'', ''2001'', ''2002'',
  ''2003'', ''2004'', ''2005'', ''2006'', ''2007'', ''2008'', ''2009'', ''2010'',
  ''2011'', ''2012'', ''2013'', ''2014'', ''2015'', ''2016'', ''2017'', ''2018'',
  ''2019'', ''2020''], ''Data Type'': [dtype(''O''), dtype(''O''), dtype(''O''), dtype(''O''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64'')], ''Missing Values'': [0, 0, 0, 0, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
  3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 264], ''Unique
  Values'': [264, 264, 1, 1, 252, 252, 250, 251, 251, 252, 252, 252, 252, 252, 252,
  252, 252, 252, 252, 252, 252, 251, 252, 251, 252, 252, 252, 251, 252, 249, 252,
  251, 252, 251, 253, 253, 253, 251, 252, 252, 252, 251, 250, 251, 250, 250, 250,
  250, 250, 250, 250, 250, 250, 250, 249, 250, 248, 249, 249, 249, 249, 249, 249,
  248, 0]}, ''sample_data'': {''Country Name'': [''Aruba'', ''Afghanistan'', ''Angola''],
  ''Country Code'': [''ABW'', ''AFG'', ''AGO''], ''Indicator Name'': [''Urban population
  (% of total population)'', ''Urban population (% of total population)'', ''Urban
  population (% of total population)''], ''Indicator Code'': [''SP.URB.TOTL.IN.ZS'',
  ''SP.URB.TOTL.IN.ZS'', ''SP.URB.TOTL.IN.ZS''], ''1960'': [50.776, 8.401, 10.435],
  ''1961'': [50.761, 8.684, 10.798], ''1962'': [50.746, 8.976, 11.204], ''1963'':
  [50.73, 9.276, 11.624], ''1964'': [50.715, 9.586, 12.058], ''1965'': [50.7, 9.904,
  12.504], ''1966'': [50.685, 10.233, 12.965], ''1967'': [50.67, 10.57, 13.441], ''1968'':
  [50.654, 10.918, 13.932], ''1969'': [50.639, 11.275, 14.436], ''1970'': [50.624,
  11.643, 14.957], ''1971'': [50.609, 12.021, 15.632], ''1972'': [50.593, 12.41, 16.455],
  ''1973'': [50.578, 12.809, 17.31], ''1974'': [50.563, 13.219, 18.202], ''1975'':
  [50.548, 13.641, 19.128], ''1976'': [50.532, 14.074, 20.092], ''1977'': [50.517,
  14.517, 21.088], ''1978'': [50.502, 14.973, 22.122], ''1979'': [50.487, 15.442,
  23.192], ''1980'': [50.472, 15.995, 24.298], ''1981'': [50.456, 16.562, 25.437],
  ''1982'': [50.441, 17.147, 26.612], ''1983'': [50.426, 17.747, 27.821], ''1984'':
  [50.411, 18.365, 29.065], ''1985'': [50.395, 18.997, 30.338], ''1986'': [50.38,
  19.647, 31.643], ''1987'': [50.365, 20.314, 32.978], ''1988'': [50.35, 20.998, 34.343],
  ''1989'': [50.335, 21.088, 35.731], ''1990'': [50.319, 21.177, 37.144], ''1991'':
  [50.304, 21.266, 38.58], ''1992'': [49.998, 21.355, 40.039], ''1993'': [49.588,
  21.444, 41.511], ''1994'': [49.177, 21.534, 43.0], ''1995'': [48.767, 21.624, 44.169],
  ''1996'': [48.356, 21.714, 45.346], ''1997'': [47.946, 21.805, 46.525], ''1998'':
  [47.536, 21.895, 47.71], ''1999'': [47.127, 21.986, 48.897], ''2000'': [46.717,
  22.078, 50.087], ''2001'': [46.339, 22.169, 51.274], ''2002'': [45.972, 22.261,
  52.461], ''2003'': [45.606, 22.353, 53.645], ''2004'': [45.24, 22.5, 54.827], ''2005'':
  [44.875, 22.703, 56.0], ''2006'': [44.511, 22.907, 56.764], ''2007'': [44.147, 23.113,
  57.524], ''2008'': [43.783, 23.32, 58.282], ''2009'': [43.421, 23.528, 59.034],
  ''2010'': [43.059, 23.737, 59.783], ''2011'': [42.94, 23.948, 60.528], ''2012'':
  [42.957, 24.16, 61.268], ''2013'': [42.99, 24.373, 62.002], ''2014'': [43.041, 24.587,
  62.731], ''2015'': [43.108, 24.803, 63.446], ''2016'': [43.192, 25.02, 64.149],
  ''2017'': [43.293, 25.25, 64.839], ''2018'': [43.411, 25.495, 65.514], ''2019'':
  [43.546, 25.754, 66.177], ''2020'': [nan, nan, nan]}}}

  <end of data example format>


  <start of data details format>

  Worldwide Declining Urban Population Figures

  social-science

  <end of data details format>


  Given a data format, imagine a chart that visualizes this data as the final output
  you want from the service provider.

  You need to imagine a chart with * Stacked area chart that utilizes the data format.

  If there are multiple given data formats, imagine a chart with * Stacked area chart
  that utilizes all the data formats.

  Since you are an amateur user, your instruction will be partially SUBJECTIVE and
  NOT DETAILED.

  Also, refer to the data details to create as practical and realistic instructions
  as possible.

  Instructions must reflect the context of the data.

  To emulate a real-world user your instruction should be 50 in size (word count).

  Your response should ONLY contain the user emulated instruction.

  Do not include anything else.'
1-4. total_chart_types:
- '* Heatmap'
- '* Histogram'
- '* Scatter plot'
- '* Bar chart'
- '* Box chart'
- '* Stacked area chart'
2. initial_prompt: !!python/tuple
- Create a stacked area chart showing the urban population percentage by country from
  1960 to 2020 using the provided data. Highlight trends in declining urban populations
  worldwide. Ensure each country is represented with a different color for clarity.
- 2499
- 2454
- 45
