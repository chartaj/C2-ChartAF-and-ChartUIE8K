1-1. selected_chart_types: !!python/tuple
- '* Bar chart

  * Column chart

  * Grouped bar/column chart

  * Range chart

  * Scatter plot

  * Stacked bar/column chart

  * Line chart

  * Spline chart

  * Histogram

  * Box chart'
- 1151
- 1104
- 47
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list>\n\n3. Highlights:\nDescription: Highlights modify\
  \ the appearance of chart elements (e.g., size, color) to emphasize or reduce their\
  \ importance.\nPurpose: Used to distinguish certain elements from others, making\
  \ them stand out visually\n\n1. Text Annotations:\nDescription: Data-driven text\
  \ annotations display values linked to chart elements, such as data points in a\
  \ scatterplot. They draw attention to specific elements by highlighting their values.\n\
  Purpose: When only some elements are annotated, the intent is to focus the viewer\u2019\
  s attention on those before examining others.\nOther Uses: Non-data-driven annotations\
  \ can provide context, orientation, or editorial comments.\n\n<end of the annotation\
  \ list>"
- 951
- 813
- 138
1-3. asking_user_emulator_for_initial_prompt: 'You are an expert user emulator.


  <start of data example format>

  {''../Extra_datas/data/430.csv'': {''summary'': {''Column'': [''url'', ''weekid'',
  ''week_position'', ''song'', ''performer'', ''songid'', ''instance'', ''previous_week_position'',
  ''peak_position'', ''weeks_on_chart'', ''year'', ''month'', ''day''], ''Data Type'':
  [dtype(''O''), dtype(''O''), dtype(''int64''), dtype(''O''), dtype(''O''), dtype(''O''),
  dtype(''int64''), dtype(''float64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64'')], ''Missing Values'': [0, 0, 0, 0, 0, 0, 0, 108,
  0, 0, 0, 0, 0], ''Unique Values'': [206, 206, 89, 70, 69, 78, 6, 83, 61, 18, 46,
  3, 31]}, ''sample_data'': {''url'': [''http://www.billboard.com/charts/hot-100/1958-12-13'',
  ''http://www.billboard.com/charts/hot-100/1958-12-20'', ''http://www.billboard.com/charts/hot-100/1958-12-20''],
  ''weekid'': [''12/13/1958'', ''12/20/1958'', ''12/20/1958''], ''week_position'':
  [83, 57, 73], ''song'': [''RUN RUDOLPH RUN'', ''JINGLE BELL ROCK'', ''RUN RUDOLPH
  RUN''], ''performer'': [''Chuck Berry'', ''Bobby Helms'', ''Chuck Berry''], ''songid'':
  [''Run Rudolph RunChuck Berry'', ''Jingle Bell RockBobby Helms'', ''Run Rudolph
  RunChuck Berry''], ''instance'': [1, 1, 1], ''previous_week_position'': [nan, nan,
  83.0], ''peak_position'': [69, 29, 69], ''weeks_on_chart'': [3, 19, 3], ''year'':
  [1958, 1958, 1958], ''month'': [12, 12, 12], ''day'': [13, 20, 20]}}}

  <end of data example format>


  <start of data details format>

  christmas songs charting the billboard

  music

  <end of data details format>


  Given a data format, imagine a chart that visualizes this data as the final output
  you want from the service provider.

  You need to imagine a chart with * Box chart that utilizes the data format.

  If there are multiple given data formats, imagine a chart with * Box chart that
  utilizes all the data formats.

  Since you are an amateur user, your instruction will be partially SUBJECTIVE and
  NOT DETAILED.

  Also, refer to the data details to create as practical and realistic instructions
  as possible.

  Instructions must reflect the context of the data.

  To emulate a real-world user your instruction should be 50 in size (word count).

  Your response should ONLY contain the user emulated instruction.

  Do not include anything else.'
1-4. total_chart_types:
- '* Bar chart'
- '* Line chart'
- '* Histogram'
- '* Stacked bar/column chart'
- '* Box chart'
2. initial_prompt: !!python/tuple
- Create a box chart to visualize the peak positions of Christmas songs on the Billboard
  chart from the provided data. Please group the data by the song title.
- 718
- 688
- 30
