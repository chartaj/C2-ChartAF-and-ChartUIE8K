1-1. selected_chart_types: !!python/tuple
- '* Bar chart

  * Grouped bar/column chart

  * Line chart

  * Scatter plot

  * Heatmap

  * Box chart

  * Geographic heatmap

  * Choropleth map

  * Pie chart

  * Treemap'
- 1075
- 1029
- 46
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list>\n1. Text Annotations:\nDescription: Data-driven\
  \ text annotations display values linked to chart elements, such as data points\
  \ in a scatterplot. They draw attention to specific elements by highlighting their\
  \ values.\nPurpose: When only some elements are annotated, the intent is to focus\
  \ the viewer\u2019s attention on those before examining others.\nOther Uses: Non-data-driven\
  \ annotations can provide context, orientation, or editorial comments.\n\n3. Highlights:\n\
  Description: Highlights modify the appearance of chart elements (e.g., size, color)\
  \ to emphasize or reduce their importance.\nPurpose: Used to distinguish certain\
  \ elements from others, making them stand out visually.\n<end of the annotation\
  \ list>"
- 874
- 736
- 138
1-3. asking_user_emulator_for_initial_prompt: "You are an expert user emulator.\n\n\
  <start of data example format>\n{'../Extra_datas/data/243.csv': {'summary': {'Column':\
  \ ['Location', 'Observation Time', 'Temperature (\xB0C)', 'Feels Like (\xB0C)',\
  \ 'Humidity (%)', 'Wind Speed (kph)', 'Weather Condition', 'Cloud Cover (%)', 'Pressure\
  \ (mb)', 'UV Index', 'Visibility (km)'], 'Data Type': [dtype('O'), dtype('O'), dtype('float64'),\
  \ dtype('float64'), dtype('int64'), dtype('float64'), dtype('O'), dtype('int64'),\
  \ dtype('int64'), dtype('int64'), dtype('int64')], 'Missing Values': [0, 0, 0, 0,\
  \ 0, 0, 0, 0, 0, 0, 0], 'Unique Values': [8, 7, 7, 8, 8, 7, 3, 3, 7, 4, 2]}, 'sample_data':\
  \ {'Location': ['New York', 'New York', 'New York'], 'Observation Time': ['4/5/2024\
  \ 14:15', '4/5/2024 14:15', '4/5/2024 14:15'], 'Temperature (\xB0C)': [8.3, 8.3,\
  \ 8.3], 'Feels Like (\xB0C)': [4.5, 4.5, 4.5], 'Humidity (%)': [40, 40, 40], 'Wind\
  \ Speed (kph)': [29.9, 29.9, 29.9], 'Weather Condition': ['Partly cloudy', 'Partly\
  \ cloudy', 'Partly cloudy'], 'Cloud Cover (%)': [75, 75, 75], 'Pressure (mb)': [1003,\
  \ 1003, 1003], 'UV Index': [2, 2, 2], 'Visibility (km)': [16, 16, 16]}}}\n<end of\
  \ data example format>\n\n<start of data details format>\nGlobal Metropolis Weather\
  \ Dataset\nweather\n<end of data details format>\n\nGiven a data format, imagine\
  \ a chart that visualizes this data as the final output you want from the service\
  \ provider.\nYou need to imagine a chart with * Line chart that utilizes the data\
  \ format.\nIf there are multiple given data formats, imagine a chart with * Line\
  \ chart that utilizes all the data formats.\nSince you are an amateur user, your\
  \ instruction will be partially SUBJECTIVE and NOT DETAILED.\nAlso, refer to the\
  \ data details to create as practical and realistic instructions as possible.\n\
  Instructions must reflect the context of the data.\nTo emulate a real-world user\
  \ your instruction should be 100 in size (word count).\nYour response should ONLY\
  \ contain the user emulated instruction.\nDo not include anything else."
1-4. total_chart_types:
- '* Geographic heatmap'
- '* Scatter plot'
- '* Treemap'
- '* Pie chart'
- '* Box chart'
- '* Heatmap'
- '* Choropleth map'
- '* Bar chart'
- '* Line chart'
- '* Grouped bar/column chart'
- '* Geographic heatmap'
- '* Scatter plot'
- '* Treemap'
- '* Pie chart'
- '* Box chart'
- '* Heatmap'
- '* Choropleth map'
- '* Bar chart'
- '* Line chart'
2. initial_prompt: !!python/tuple
- "I have a weather dataset covering various parameters across multiple locations.\
  \ I want to create a line chart that visually represents temperature changes throughout\
  \ the observation times for each location. The x-axis should display Observation\
  \ Time, while the y-axis should show Temperature (\xB0C). Different lines should\
  \ represent different locations, allowing a clear comparison of temperature trends\
  \ at each timestamp. Be sure to include labels for the x and y axes, and a legend\
  \ to differentiate between locations. The chart should be clear and easy to interpret,\
  \ considering users with minimal technical background."
- 717
- 611
- 106
