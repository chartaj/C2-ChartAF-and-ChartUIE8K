1-1. selected_chart_types: !!python/tuple
- 'Bar chart

  Column chart

  Grouped bar/column chart

  Lollipop chart

  Dot plot

  Radar chart

  Table chart

  Bubble chart

  Scatter plot

  Heatmap

  Stacked bar/column chart

  Donut chart

  Treemap

  Line chart

  Spline chart

  Histogram

  Box chart

  Violin plot'
- 1230
- 1168
- 62
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list>\n1. Text Annotations:\nDescription: Data-driven\
  \ text annotations display values linked to chart elements, such as data points\
  \ in a scatterplot. They draw attention to specific elements by highlighting their\
  \ values.\nPurpose: When only some elements are annotated, the intent is to focus\
  \ the viewer\u2019s attention on those before examining others.\nOther Uses: Non-data-driven\
  \ annotations can provide context, orientation, or editorial comments.\n\n2. Highlights:\n\
  Description: Highlights modify the appearance of chart elements (e.g., size, color)\
  \ to emphasize or reduce their importance.\nPurpose: Used to distinguish certain\
  \ elements from others, making them stand out visually\n<end of the annotation list>"
- 1012
- 874
- 138
1-3. asking_user_emulator_for_initial_prompt: 'You are an expert user emulator.


  <start of data example format>

  {''../Extra_datas/data/383.csv'': {''summary'': {''Column'': [''Almost Certainly'',
  ''Highly Likely'', ''Very Good Chance'', ''Probable'', ''Likely'', ''Probably'',
  ''We Believe'', ''Better Than Even'', ''About Even'', ''We Doubt'', ''Improbable'',
  ''Unlikely'', ''Probably Not'', ''Little Chance'', ''Almost No Chance'', ''Highly
  Unlikely'', ''Chances Are Slight''], ''Data Type'': [dtype(''float64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''float64''), dtype(''int64''), dtype(''int64''), dtype(''float64''), dtype(''int64''),
  dtype(''float64''), dtype(''int64''), dtype(''float64''), dtype(''int64''), dtype(''int64'')],
  ''Missing Values'': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ''Unique
  Values'': [11, 14, 10, 10, 10, 13, 15, 12, 6, 18, 20, 15, 14, 14, 9, 12, 10]}, ''sample_data'':
  {''Almost Certainly'': [95.0, 95.0, 95.0], ''Highly Likely'': [80, 75, 85], ''Very
  Good Chance'': [85, 75, 85], ''Probable'': [75, 51, 70], ''Likely'': [66, 75, 75],
  ''Probably'': [75, 51, 70], ''We Believe'': [66, 51, 80], ''Better Than Even'':
  [55.0, 51.0, 60.0], ''About Even'': [50, 50, 50], ''We Doubt'': [40, 20, 30], ''Improbable'':
  [20.0, 49.0, 10.0], ''Unlikely'': [30, 25, 25], ''Probably Not'': [15.0, 49.0, 25.0],
  ''Little Chance'': [20, 5, 20], ''Almost No Chance'': [5.0, 5.0, 1.0], ''Highly
  Unlikely'': [25, 10, 5], ''Chances Are Slight'': [25, 5, 15]}}}

  <end of data example format>


  <start of data details format>

  How people evaluate service

  business

  <end of data details format>


  Given a data format, imagine a chart that visualizes this data as the final output
  you want from the service provider.

  It MUST be a chart that can be created using only data columns.

  You need to imagine a chart with Box chart that utilizes the data format.

  If there are multiple given data formats, imagine a chart with Box chart that utilizes
  all the data formats.

  Since you are an amateur user, your instruction will be partially SUBJECTIVE and
  NOT DETAILED.

  Also, refer to the data details to create as practical and realistic instructions
  as possible.

  Instructions must reflect the context of the data.

  To emulate a real-world user your instruction should be 50 in size (word count).

  Your response should ONLY contain the user emulated instruction.

  Do not include anything else.'
1-4. total_chart_types:
- Stacked bar/column chart
- Donut chart
- Bar chart
- Radar chart
- Box chart
2. initial_prompt: !!python/tuple
- Create a box plot to visualize how people evaluate service quality in a business.
  Use all columns to show the distribution of evaluations.
- 786
- 761
- 25
