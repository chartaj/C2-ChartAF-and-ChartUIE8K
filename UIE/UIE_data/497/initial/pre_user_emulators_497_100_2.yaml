1-1. selected_chart_types: !!python/tuple
- '* Bar chart

  * Heatmap

  * Scatter plot

  * Stacked bar/column chart

  * Line chart

  * Histogram'
- 887
- 861
- 26
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list> \n1. Text Annotations:\nDescription: Data-driven\
  \ text annotations display values linked to chart elements, such as data points\
  \ in a scatterplot. They draw attention to specific elements by highlighting their\
  \ values.\nPurpose: When only some elements are annotated, the intent is to focus\
  \ the viewer\u2019s attention on those before examining others.\nOther Uses: Non-data-driven\
  \ annotations can provide context, orientation, or editorial comments.\n3. Highlights:\n\
  Description: Highlights modify the appearance of chart elements (e.g., size, color)\
  \ to emphasize or reduce their importance.\nPurpose: Used to distinguish certain\
  \ elements from others, making them stand out visually\n<end of the annotation list>"
- 707
- 568
- 139
1-3. asking_user_emulator_for_initial_prompt: "\uFEFFYou are an expert user emulator.\n\
  \n<start of data example format>\n{'../Extra_datas/data/497.csv': {'summary': {'Column':\
  \ ['processor', 'transistor_count', 'date_of_introduction', 'designer', 'process',\
  \ 'area'], 'Data Type': [dtype('O'), dtype('float64'), dtype('int64'), dtype('O'),\
  \ dtype('float64'), dtype('float64')], 'Missing Values': [0, 6, 0, 0, 9, 27], 'Unique\
  \ Values': [175, 139, 49, 36, 37, 118]}, 'sample_data': {'processor': ['MP944 (20-bit,\
  \ 6-chip)', 'Intel 4004 (4-bit, 16-pin)', 'Intel 8008 (8-bit, 18-pin)'], 'transistor_count':\
  \ [nan, 2250.0, 3500.0], 'date_of_introduction': [1970, 1971, 1972], 'designer':\
  \ ['Garrett AiResearch', 'Intel', 'Intel'], 'process': [nan, 10000.0, 10000.0],\
  \ 'area': [nan, 12.0, 14.0]}}}\n<end of data example format>\n\n<start of annotations\
  \ format>\n['<start of the annotation list>', '1. Text Annotations:', 'Description:\
  \ Data-driven text annotations display values linked to chart elements, such as\
  \ data points in a scatterplot. They draw attention to specific elements by highlighting\
  \ their values.', 'Purpose: When only some elements are annotated, the intent is\
  \ to focus the viewer\u2019s attention on those before examining others.', 'Other\
  \ Uses: Non-data-driven annotations can provide context, orientation, or editorial\
  \ comments.', '3. Highlights:', 'Description: Highlights modify the appearance of\
  \ chart elements (e.g., size, color) to emphasize or reduce their importance.',\
  \ 'Purpose: Used to distinguish certain elements from others, making them stand\
  \ out visually', '<end of the annotation list>']\n<end of annotations format>\n\n\
  <start of data details format>\ncpu\ncomputers-and-technology\n<end of data details\
  \ format>\n\nGiven a data format, imagine a chart that visualizes this data as the\
  \ final output you want from the service provider.\nConsider what purpose the data\
  \ has and the practical purpose of visualization and include it in the instructions.\n\
  You need to imagine a chart with * Line chart and given annotations that utilizes\
  \ the data format.\nIf there are multiple given data formats, imagine a chart with\
  \ * Line chart and given annotations that utilizes all the data formats.\nSince\
  \ you are an amateur user, your instruction will be partially SUBJECTIVE and NOT\
  \ DETAILED.\nAlso, refer to the data details to create as practical and realistic\
  \ instructions as possible.\nInstructions must reflect the context of the data.\n\
  To emulate a real-world user your instruction should be 100 in size (word count).\
  \ Do not include data path in the instruction.\nYour response should ONLY contain\
  \ the user emulated instruction.\nDo not include anything else."
1-4. total_chart_types:
- '* Histogram'
- '* Bar chart'
- '* Line chart'
- '* Stacked bar/column chart'
- '* Scatter plot'
- '* Heatmap'
- '* Histogram'
- '* Bar chart'
- '* Line chart'
2. initial_prompt: !!python/tuple
- Create a line chart to visualize the introduction dates of processors against their
  transistor counts. Highlight processors designed by Intel to emphasize their standout
  contributions. Use text annotations to label key processors, such as "Intel 4004"
  and "Intel 8008," with their introduction dates, transistor counts, and process
  dimensions. This visualization will help trace the evolution of processor complexity
  over time, providing insights into technological advancements in computing. Keep
  the chart clear and informative, focusing on significant data points to understand
  progression trends without overwhelming the viewer.
- 741
- 637
- 104
