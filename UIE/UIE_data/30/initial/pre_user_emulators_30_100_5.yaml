1-1. selected_chart_types: !!python/tuple
- '* Bar chart

  * Heatmap

  * Stacked bar/column chart

  * Line chart

  * Histogram

  * Treemap'
- 3337
- 3311
- 26
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list> \n1. Shapes:\nDescription: Shape annotations include\
  \ lines, arrows, rectangles, and other shapes. They can highlight or enclose specific\
  \ chart elements to emphasize or compare them.\nData-Driven Use: Some shapes, like\
  \ trend lines, are calculated from the underlying data.\n\n3. Highlights:\nDescription:\
  \ Highlights modify the appearance of chart elements (e.g., size, color) to emphasize\
  \ or reduce their importance.\nPurpose: Used to distinguish certain elements from\
  \ others, making them stand out visually\n<end of the annotation list>"
- 3130
- 3018
- 112
1-3. asking_user_emulator_for_initial_prompt: 'You are an expert user emulator.


  <start of data example format>

  {''../Extra_datas/data/30.csv'': {''summary'': {''Column'': [''ORIGIN'', ''MOSTYPE'',
  ''MAANTHUI'', ''MGEMOMV'', ''MGEMLEEF'', ''MOSHOOFD'', ''MGODRK'', ''MGODPR'', ''MGODOV'',
  ''MGODGE'', ''MRELGE'', ''MRELSA'', ''MRELOV'', ''MFALLEEN'', ''MFGEKIND'', ''MFWEKIND'',
  ''MOPLHOOG'', ''MOPLMIDD'', ''MOPLLAAG'', ''MBERHOOG'', ''MBERZELF'', ''MBERBOER'',
  ''MBERMIDD'', ''MBERARBG'', ''MBERARBO'', ''MSKA'', ''MSKB1'', ''MSKB2'', ''MSKC'',
  ''MSKD'', ''MHHUUR'', ''MHKOOP'', ''MAUT1'', ''MAUT2'', ''MAUT0'', ''MZFONDS'',
  ''MZPART'', ''MINKM30'', ''MINK3045'', ''MINK4575'', ''MINK7512'', ''MINK123M'',
  ''MINKGEM'', ''MKOOPKLA'', ''PWAPART'', ''PWABEDR'', ''PWALAND'', ''PPERSAUT'',
  ''PBESAUT'', ''PMOTSCO'', ''PVRAAUT'', ''PAANHANG'', ''PTRACTOR'', ''PWERKT'', ''PBROM'',
  ''PLEVEN'', ''PPERSONG'', ''PGEZONG'', ''PWAOREG'', ''PBRAND'', ''PZEILPL'', ''PPLEZIER'',
  ''PFIETS'', ''PINBOED'', ''PBYSTAND'', ''AWAPART'', ''AWABEDR'', ''AWALAND'', ''APERSAUT'',
  ''ABESAUT'', ''AMOTSCO'', ''AVRAAUT'', ''AAANHANG'', ''ATRACTOR'', ''AWERKT'', ''ABROM'',
  ''ALEVEN'', ''APERSONG'', ''AGEZONG'', ''AWAOREG'', ''ABRAND'', ''AZEILPL'', ''APLEZIER'',
  ''AFIETS'', ''AINBOED'', ''ABYSTAND'', ''CARAVAN''], ''Data Type'': [dtype(''O''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64'')], ''Missing Values'': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ''Unique Values'': [2,
  40, 9, 6, 6, 10, 10, 10, 6, 10, 10, 8, 10, 10, 10, 10, 10, 10, 10, 10, 6, 10, 10,
  10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 9, 10, 10, 10, 10, 10, 10, 10, 9, 10, 8,
  4, 7, 5, 7, 4, 6, 5, 6, 6, 6, 6, 10, 7, 3, 5, 9, 4, 7, 2, 7, 5, 3, 3, 2, 9, 6, 5,
  5, 4, 7, 6, 4, 7, 2, 2, 3, 8, 2, 3, 5, 3, 3, 2]}, ''sample_data'': {''ORIGIN'':
  [''train'', ''train'', ''train''], ''MOSTYPE'': [33, 37, 37], ''MAANTHUI'': [1,
  1, 1], ''MGEMOMV'': [3, 2, 2], ''MGEMLEEF'': [2, 2, 2], ''MOSHOOFD'': [8, 8, 8],
  ''MGODRK'': [0, 1, 0], ''MGODPR'': [5, 4, 4], ''MGODOV'': [1, 1, 2], ''MGODGE'':
  [3, 4, 4], ''MRELGE'': [7, 6, 3], ''MRELSA'': [0, 2, 2], ''MRELOV'': [2, 2, 4],
  ''MFALLEEN'': [1, 0, 4], ''MFGEKIND'': [2, 4, 4], ''MFWEKIND'': [6, 5, 2], ''MOPLHOOG'':
  [1, 0, 0], ''MOPLMIDD'': [2, 5, 5], ''MOPLLAAG'': [7, 4, 4], ''MBERHOOG'': [1, 0,
  0], ''MBERZELF'': [0, 0, 0], ''MBERBOER'': [1, 0, 0], ''MBERMIDD'': [2, 5, 7], ''MBERARBG'':
  [5, 0, 0], ''MBERARBO'': [2, 4, 2], ''MSKA'': [1, 0, 0], ''MSKB1'': [1, 2, 5], ''MSKB2'':
  [2, 3, 0], ''MSKC'': [6, 5, 4], ''MSKD'': [1, 0, 0], ''MHHUUR'': [1, 2, 7], ''MHKOOP'':
  [8, 7, 2], ''MAUT1'': [8, 7, 7], ''MAUT2'': [0, 1, 0], ''MAUT0'': [1, 2, 2], ''MZFONDS'':
  [8, 6, 9], ''MZPART'': [1, 3, 0], ''MINKM30'': [0, 2, 4], ''MINK3045'': [4, 0, 5],
  ''MINK4575'': [5, 5, 0], ''MINK7512'': [0, 2, 0], ''MINK123M'': [0, 0, 0], ''MINKGEM'':
  [4, 5, 3], ''MKOOPKLA'': [3, 4, 4], ''PWAPART'': [0, 2, 2], ''PWABEDR'': [0, 0,
  0], ''PWALAND'': [0, 0, 0], ''PPERSAUT'': [6, 0, 6], ''PBESAUT'': [0, 0, 0], ''PMOTSCO'':
  [0, 0, 0], ''PVRAAUT'': [0, 0, 0], ''PAANHANG'': [0, 0, 0], ''PTRACTOR'': [0, 0,
  0], ''PWERKT'': [0, 0, 0], ''PBROM'': [0, 0, 0], ''PLEVEN'': [0, 0, 0], ''PPERSONG'':
  [0, 0, 0], ''PGEZONG'': [0, 0, 0], ''PWAOREG'': [0, 0, 0], ''PBRAND'': [5, 2, 2],
  ''PZEILPL'': [0, 0, 0], ''PPLEZIER'': [0, 0, 0], ''PFIETS'': [0, 0, 0], ''PINBOED'':
  [0, 0, 0], ''PBYSTAND'': [0, 0, 0], ''AWAPART'': [0, 2, 1], ''AWABEDR'': [0, 0,
  0], ''AWALAND'': [0, 0, 0], ''APERSAUT'': [1, 0, 1], ''ABESAUT'': [0, 0, 0], ''AMOTSCO'':
  [0, 0, 0], ''AVRAAUT'': [0, 0, 0], ''AAANHANG'': [0, 0, 0], ''ATRACTOR'': [0, 0,
  0], ''AWERKT'': [0, 0, 0], ''ABROM'': [0, 0, 0], ''ALEVEN'': [0, 0, 0], ''APERSONG'':
  [0, 0, 0], ''AGEZONG'': [0, 0, 0], ''AWAOREG'': [0, 0, 0], ''ABRAND'': [1, 1, 1],
  ''AZEILPL'': [0, 0, 0], ''APLEZIER'': [0, 0, 0], ''AFIETS'': [0, 0, 0], ''AINBOED'':
  [0, 0, 0], ''ABYSTAND'': [0, 0, 0], ''CARAVAN'': [0, 0, 0]}}}

  <end of data example format>


  <start of data details format>

  Caravan Insurance Challenge

  automobiles

  <end of data details format>


  Given a data format, imagine a chart that visualizes this data as the final output
  you want from the service provider.

  It MUST be a chart that can be created using only data columns.

  You need to imagine a chart with * Bar chart that utilizes the data format.

  If there are multiple given data formats, imagine a chart with * Bar chart that
  utilizes all the data formats.

  Since you are an amateur user, your instruction will be partially SUBJECTIVE and
  NOT DETAILED.

  Also, refer to the data details to create as practical and realistic instructions
  as possible.

  Instructions must reflect the context of the data.

  To emulate a real-world user your instruction should be 100 in size (word count).

  Your response should ONLY contain the user emulated instruction.

  Do not include anything else.'
1-4. total_chart_types:
- '* Line chart'
- '* Treemap'
- '* Heatmap'
- '* Stacked bar/column chart'
- '* Histogram'
- '* Bar chart'
- '* Line chart'
- '* Treemap'
- '* Heatmap'
- '* Stacked bar/column chart'
- '* Histogram'
- '* Bar chart'
2. initial_prompt: !!python/tuple
- Create a bar chart to visualize the distribution of the "MOSTYPE" column, which
  signifies different customer types in the Caravan Insurance Challenge dataset. The
  x-axis should represent the unique customer types (from 1 to 40), and the y-axis
  should show the count of instances for each type. This will help in understanding
  which customer types are more prevalent in the data. Make sure to include a title
  and labels for both axes to ensure clarity. Utilize the first few rows of data for
  accurate representation and to keep the chart simple and easy to understand.
- 3017
- 2907
- 110
