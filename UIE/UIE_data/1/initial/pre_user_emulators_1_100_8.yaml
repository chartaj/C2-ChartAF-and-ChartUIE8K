1-1. selected_chart_types: !!python/tuple
- '* Bar chart

  * Column chart

  * Grouped bar/column chart

  * Radar chart

  * Heatmap

  * Stacked bar/column chart

  * Stacked area chart

  * Line chart

  * Scatter plot

  * Donut chart'
- 1182
- 1132
- 50
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list> \n1. Text Annotations:\nDescription: Data-driven\
  \ text annotations display values linked to chart elements, such as data points\
  \ in a scatterplot. They draw attention to specific elements by highlighting their\
  \ values.\nPurpose: When only some elements are annotated, the intent is to focus\
  \ the viewer\u2019s attention on those before examining others.\nOther Uses: Non-data-driven\
  \ annotations can provide context, orientation, or editorial comments.\n3. Highlights:\n\
  Description: Highlights modify the appearance of chart elements (e.g., size, color)\
  \ to emphasize or reduce their importance.\nPurpose: Used to distinguish certain\
  \ elements from others, making them stand out visually\n<end of the annotation list>"
- 980
- 841
- 139
1-3. asking_user_emulator_for_initial_prompt: 'You are an expert user emulator.


  <start of data example format>

  {''../Extra_datas/data/1.csv'': {''summary'': {''Column'': [''Index Number '', ''Rank'',
  ''Country/Economy'', ''GDP (millions of $)'', ''Agriculture GDP'', ''Agriculture
  Sector GDP Rank'', ''Agriculture Sector GDP of % Contribution'', ''IndustryGDP'',
  ''IndustryRank'', ''Industry%ofGDP'', ''ServicesGDP'', ''ServicesRank'', ''Services%ofGDP'',
  ''Year GDP '', ''Year Sector''], ''Data Type'': [dtype(''int64''), dtype(''O''),
  dtype(''O''), dtype(''O''), dtype(''O''), dtype(''O''), dtype(''O''), dtype(''O''),
  dtype(''O''), dtype(''O''), dtype(''O''), dtype(''O''), dtype(''O''), dtype(''O''),
  dtype(''O'')], ''Missing Values'': [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  ''Unique Values'': [230, 225, 230, 225, 208, 219, 150, 217, 221, 172, 220, 222,
  178, 11, 17]}, ''sample_data'': {''Index Number '': [0, 1, 2], ''Rank'': [''1'',
  ''2'', ''3''], ''Country/Economy'': [''United States'', ''China'', ''Japan''], ''GDP
  (millions of $)'': [''19360000'', ''11940000'', ''4884000''], ''Agriculture GDP'':
  [''174240'', ''991020'', ''48840''], ''Agriculture Sector GDP Rank'': [''3'', ''1'',
  ''13''], ''Agriculture Sector GDP of % Contribution'': [''0.9'', ''8.3'', ''1''],
  ''IndustryGDP'': [''3659040'', ''4716300'', ''1450548''], ''IndustryRank'': [''2'',
  ''1'', ''3''], ''Industry%ofGDP'': [''18.9'', ''39.5'', ''29.7''], ''ServicesGDP'':
  [''15526720'', ''6232680'', ''3384612''], ''ServicesRank'': [''1'', ''2'', ''3''],
  ''Services%ofGDP'': [''80.2'', ''52.2'', ''69.3''], ''Year GDP '': [''2017'', ''2017'',
  ''2017''], ''Year Sector'': [''2017'', ''2017'', ''2017'']}}}

  <end of data example format>


  <start of data details format>

  List of Countries by GDP Sector Composition

  business

  <end of data details format>


  Given a data format, imagine a chart that visualizes this data as the final output
  you want from the service provider.

  It MUST be a chart that can be created using only data columns.

  You need to imagine a chart with * Column chart that utilizes the data format.

  If there are multiple given data formats, imagine a chart with * Column chart that
  utilizes all the data formats.

  Since you are an amateur user, your instruction will be partially SUBJECTIVE and
  NOT DETAILED.

  Also, refer to the data details to create as practical and realistic instructions
  as possible.

  Instructions must reflect the context of the data.

  To emulate a real-world user your instruction should be 100 in size (word count).

  Your response should ONLY contain the user emulated instruction.

  Do not include anything else.'
1-4. total_chart_types:
- '* Scatter plot'
- '* Line chart'
- '* Grouped bar/column chart'
- '* Donut chart'
- '* Bar chart'
- '* Stacked area chart'
- '* Heatmap'
- '* Stacked bar/column chart'
- '* Column chart'
- '* Radar chart'
- '* Scatter plot'
- '* Line chart'
- '* Grouped bar/column chart'
- '* Donut chart'
- '* Bar chart'
- '* Stacked area chart'
- '* Heatmap'
- '* Stacked bar/column chart'
- '* Column chart'
2. initial_prompt: !!python/tuple
- Create a column chart to compare the GDP sector compositions of the top 3 countries
  (United States, China, and Japan) in 2017. The X-axis should represent the countries,
  and the Y-axis should represent the GDP values in millions of dollars. Use different
  colors to distinguish between Agriculture, Industry, and Services sectors. Add labels
  and a legend for clarity.
- 804
- 730
- 74
