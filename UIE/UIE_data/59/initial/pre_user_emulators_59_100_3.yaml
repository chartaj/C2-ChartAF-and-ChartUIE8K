1-1. selected_chart_types: !!python/tuple
- '* Column chart

  * Heatmap

  * Scatter plot

  * Stacked area chart

  * Candlestick chart

  * Histogram

  * Box chart'
- 966
- 937
- 29
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list> \n1. Text Annotations:\nDescription: Data-driven\
  \ text annotations display values linked to chart elements, such as data points\
  \ in a scatterplot. They draw attention to specific elements by highlighting their\
  \ values.\nPurpose: When only some elements are annotated, the intent is to focus\
  \ the viewer\u2019s attention on those before examining others.\nOther Uses: Non-data-driven\
  \ annotations can provide context, orientation, or editorial comments.\n3. Highlights:\n\
  Description: Highlights modify the appearance of chart elements (e.g., size, color)\
  \ to emphasize or reduce their importance.\nPurpose: Used to distinguish certain\
  \ elements from others, making them stand out visually\n<end of the annotation list>"
- 783
- 644
- 139
1-3. asking_user_emulator_for_initial_prompt: "You are an expert user emulator.\n\n\
  <start of data example format>\n{'../Extra_datas/data/59.csv': {'summary': {'Column':\
  \ ['date', 'open_price', 'high_price', 'low_price', 'close_price', 'volume', 'adjclose_price'],\
  \ 'Data Type': [dtype('O'), dtype('float64'), dtype('float64'), dtype('float64'),\
  \ dtype('float64'), dtype('float64'), dtype('float64')], 'Missing Values': [0, 0,\
  \ 0, 0, 0, 0, 0], 'Unique Values': [4773, 2941, 3042, 3009, 3051, 4533, 3818]},\
  \ 'sample_data': {'date': ['2021-01-28', '2021-01-27', '2021-01-26'], 'open_price':\
  \ [265.0, 354.8299865722656, 88.55999755859375], 'high_price': [483.0, 380.0, 150.0],\
  \ 'low_price': [112.25, 249.0, 80.19999694824219], 'close_price': [193.6000061035156,\
  \ 347.510009765625, 147.97999572753906], 'volume': [58815800.0, 93396700.0, 178588000.0],\
  \ 'adjclose_price': [193.6000061035156, 347.510009765625, 147.97999572753906]}}}\n\
  <end of data example format>\n\n<start of data details format>\nGameStop Historical\
  \ Stock Prices \nbusiness\n<end of data details format>\n\nGiven a data format,\
  \ imagine a chart that visualizes this data as the final output you want from the\
  \ service provider.\nYou need to imagine a chart with * Stacked area chart that\
  \ utilizes the data format.\nIf there are multiple given data formats, imagine a\
  \ chart with * Stacked area chart that utilizes all the data formats.\nSince you\
  \ are an amateur user, your instruction will be partially SUBJECTIVE and NOT DETAILED.\n\
  Also, refer to the data details to create as practical and realistic instructions\
  \ as possible.\nInstructions must reflect the context of the data.\nTo emulate a\
  \ real-world user your instruction should be 100 in size (word count).\nYour response\
  \ should ONLY contain the user emulated instruction.\nDo not include anything else."
1-4. total_chart_types:
- '* Histogram'
- '* Scatter plot'
- '* Column chart'
- '* Stacked area chart'
- '* Box chart'
- '* Candlestick chart'
- '* Heatmap'
- '* Histogram'
- '* Scatter plot'
- '* Column chart'
- '* Stacked area chart'
2. initial_prompt: !!python/tuple
- I need a stacked area chart showing GameStop's historical stock prices over time.
  The x-axis should display the dates, while the y-axis should display the price values.
  Different segments within the area chart should represent open price, high price,
  low price, and close price to visualize their variations day by day. Include volume
  as another shaded area for additional context. Make sure that the chart is easy
  to read and understand, with each price type clearly differentiated by color. This
  will help in visualizing how GameStop's stock has fluctuated. Thank you!
- 634
- 523
- 111
