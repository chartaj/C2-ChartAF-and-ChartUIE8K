1-1. selected_chart_types: !!python/tuple
- '* Bar chart

  * Scatter plot

  * Stacked bar/column chart

  * Line chart

  * Histogram

  * Box chart'
- 1189
- 1163
- 26
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list> \n1. Text Annotations:\nDescription: Data-driven\
  \ text annotations display values linked to chart elements, such as data points\
  \ in a scatterplot. They draw attention to specific elements by highlighting their\
  \ values.\nPurpose: When only some elements are annotated, the intent is to focus\
  \ the viewer\u2019s attention on those before examining others.\nOther Uses: Non-data-driven\
  \ annotations can provide context, orientation, or editorial comments.\n3. Highlights:\n\
  Description: Highlights modify the appearance of chart elements (e.g., size, color)\
  \ to emphasize or reduce their importance.\nPurpose: Used to distinguish certain\
  \ elements from others, making them stand out visually\n<end of the annotation list>"
- 1011
- 872
- 139
1-3. asking_user_emulator_for_initial_prompt: "You are an expert user emulator.\n\n\
  <start of data example format>\n{'../Extra_datas/data/138.csv': {'summary': {'Column':\
  \ ['male', 'age', 'education', 'currentSmoker', 'cigsPerDay', 'BPMeds', 'prevalentStroke',\
  \ 'prevalentHyp', 'diabetes', 'totChol', 'sysBP', 'diaBP', 'BMI', 'heartRate', 'glucose',\
  \ 'TenYearCHD'], 'Data Type': [dtype('int64'), dtype('int64'), dtype('float64'),\
  \ dtype('int64'), dtype('float64'), dtype('float64'), dtype('int64'), dtype('int64'),\
  \ dtype('int64'), dtype('float64'), dtype('float64'), dtype('float64'), dtype('float64'),\
  \ dtype('float64'), dtype('float64'), dtype('int64')], 'Missing Values': [0, 0,\
  \ 105, 0, 29, 53, 0, 0, 0, 50, 0, 0, 19, 1, 388, 0], 'Unique Values': [2, 39, 4,\
  \ 2, 33, 2, 2, 2, 2, 248, 234, 146, 1363, 73, 143, 2]}, 'sample_data': {'male':\
  \ [1, 0, 1], 'age': [39, 46, 48], 'education': [4.0, 2.0, 1.0], 'currentSmoker':\
  \ [0, 0, 1], 'cigsPerDay': [0.0, 0.0, 20.0], 'BPMeds': [0.0, 0.0, 0.0], 'prevalentStroke':\
  \ [0, 0, 0], 'prevalentHyp': [0, 0, 0], 'diabetes': [0, 0, 0], 'totChol': [195.0,\
  \ 250.0, 245.0], 'sysBP': [106.0, 121.0, 127.5], 'diaBP': [70.0, 81.0, 80.0], 'BMI':\
  \ [26.97, 28.73, 25.34], 'heartRate': [80.0, 95.0, 75.0], 'glucose': [77.0, 76.0,\
  \ 70.0], 'TenYearCHD': [0, 0, 0]}}}\n<end of data example format>\n\n<start of data\
  \ details format>\n  Logistic regression To predict heart disease\nhealth\n<end\
  \ of data details format>\n\nGiven a data format, imagine a chart that visualizes\
  \ this data as the final output you want from the service provider.\nIt MUST be\
  \ a chart that can be created using only data columns.\nYou need to imagine a chart\
  \ with * Line chart that utilizes the data format.\nIf there are multiple given\
  \ data formats, imagine a chart with * Line chart that utilizes all the data formats.\n\
  Since you are an amateur user, your instruction will be partially SUBJECTIVE and\
  \ NOT DETAILED.\nAlso, refer to the data details to create as practical and realistic\
  \ instructions as possible.\nInstructions must reflect the context of the data.\n\
  To emulate a real-world user your instruction should be 50 in size (word count).\n\
  Your response should ONLY contain the user emulated instruction.\nDo not include\
  \ anything else."
1-4. total_chart_types:
- '* Stacked bar/column chart'
- '* Bar chart'
- '* Histogram'
- '* Box chart'
- '* Scatter plot'
- '* Line chart'
2. initial_prompt: !!python/tuple
- Create a line chart to visualize the trend of 'age' against 'sysBP' and 'diaBP'.
  Use the 'male' column to differentiate between males and females. Include appropriate
  labels and legends for clarity.
- 804
- 761
- 43
