1-1. selected_chart_types: !!python/tuple
- '* Bar chart

  * Heatmap

  * Pie chart

  * Line chart

  * Histogram

  * Geographic heatmap'
- 1097
- 1074
- 23
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list>\n1. Text Annotations:\nDescription: Data-driven\
  \ text annotations display values linked to chart elements, such as data points\
  \ in a scatterplot. They draw attention to specific elements by highlighting their\
  \ values.\nPurpose: When only some elements are annotated, the intent is to focus\
  \ the viewer\u2019s attention on those before examining others.\nOther Uses: Non-data-driven\
  \ annotations can provide context, orientation, or editorial comments.\n3. Highlights:\n\
  Description: Highlights modify the appearance of chart elements (e.g., size, color)\
  \ to emphasize or reduce their importance.\nPurpose: Used to distinguish certain\
  \ elements from others, making them stand out visually\n<end of the annotation list>"
- 927
- 789
- 138
1-3. asking_user_emulator_for_initial_prompt: 'You are an expert user emulator.


  <start of data example format>

  {''../Extra_datas/data/173.csv'': {''summary'': {''Column'': [''Unnamed: 0'', ''title'',
  ''artist'', ''top genre'', ''year'', ''bpm'', ''nrgy'', ''dnce'', ''dB'', ''live'',
  ''val'', ''dur'', ''acous'', ''spch'', ''pop''], ''Data Type'': [dtype(''int64''),
  dtype(''O''), dtype(''O''), dtype(''O''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''), dtype(''int64''),
  dtype(''int64''), dtype(''int64''), dtype(''int64'')], ''Missing Values'': [0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ''Unique Values'': [603, 584, 184, 50, 10,
  104, 77, 70, 14, 61, 94, 144, 75, 39, 71]}, ''sample_data'': {''Unnamed: 0'': [1,
  2, 3], ''title'': [''Hey, Soul Sister'', ''Love The Way You Lie'', ''TiK ToK''],
  ''artist'': [''Train'', ''Eminem'', ''Kesha''], ''top genre'': [''neo mellow'',
  ''detroit hip hop'', ''dance pop''], ''year'': [2010, 2010, 2010], ''bpm'': [97,
  87, 120], ''nrgy'': [89, 93, 84], ''dnce'': [67, 75, 76], ''dB'': [-4, -5, -3],
  ''live'': [8, 52, 29], ''val'': [80, 64, 71], ''dur'': [217, 263, 200], ''acous'':
  [19, 24, 10], ''spch'': [4, 23, 14], ''pop'': [83, 82, 80]}}}

  <end of data example format>


  <start of data details format>

  Top Spotify songs from 2010-2019 - BY YEAR

  music

  <end of data details format>


  Given a data format, imagine a chart that visualizes this data as the final output
  you want from the service provider.

  You need to imagine a chart with * Histogram that utilizes the data format.

  If there are multiple given data formats, imagine a chart with * Histogram that
  utilizes all the data formats.

  Since you are an amateur user, your instruction will be partially SUBJECTIVE and
  NOT DETAILED.

  Also, refer to the data details to create as practical and realistic instructions
  as possible.

  Instructions must reflect the context of the data.

  To emulate a real-world user your instruction should be 100 in size (word count).

  Your response should ONLY contain the user emulated instruction.

  Do not include anything else.'
1-4. total_chart_types:
- '* Pie chart'
- '* Bar chart'
- '* Geographic heatmap'
- '* Heatmap'
- '* Histogram'
- '* Line chart'
- '* Pie chart'
- '* Bar chart'
- '* Geographic heatmap'
- '* Heatmap'
- '* Histogram'
2. initial_prompt: !!python/tuple
- Create a histogram to visualize the distribution of song attributes from 2010-2019.
  Plot individual histograms for 'bpm', 'nrgy', 'dnce', 'val', and 'pop'. Each attribute
  should have its own histogram with appropriate bins to clearly show the frequency
  distribution. Use 'year' as a filter to see how these attributes vary over the decade.
  Include labels, titles, and a legend for clarity. This will help in understanding
  the popular attributes and trends of top Spotify songs from 2010-2019 in various
  musical aspects.
- 775
- 662
- 113
