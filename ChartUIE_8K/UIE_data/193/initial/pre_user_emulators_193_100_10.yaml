1-1. selected_chart_types: !!python/tuple
- '* Bar chart

  * Column chart

  * Dot plot

  * Radar chart

  * Scatter plot

  * Heatmap

  * Stacked bar/column chart

  * Pie chart

  * Donut chart

  * Line chart

  * Area chart

  * Histogram

  * Box chart

  * Violin plot'
- 917
- 857
- 60
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list> \n1. Text Annotations:\nDescription: Data-driven\
  \ text annotations display values linked to chart elements, such as data points\
  \ in a scatterplot. They draw attention to specific elements by highlighting their\
  \ values.\nPurpose: When only some elements are annotated, the intent is to focus\
  \ the viewer\u2019s attention on those before examining others.\nOther Uses: Non-data-driven\
  \ annotations can provide context, orientation, or editorial comments.\n3. Highlights:\n\
  Description: Highlights modify the appearance of chart elements (e.g., size, color)\
  \ to emphasize or reduce their importance.\nPurpose: Used to distinguish certain\
  \ elements from others, making them stand out visually\n<end of the annotation list>"
- 707
- 568
- 139
1-3. asking_user_emulator_for_initial_prompt: 'You are an expert user emulator.


  <start of data example format>

  {''../Extra_datas/data/193.csv'': {''summary'': {''Column'': [''Temperature'', ''L'',
  ''R'', ''A_M'', ''Color'', ''Spectral_Class'', ''Type''], ''Data Type'': [dtype(''int64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''O''), dtype(''O''),
  dtype(''int64'')], ''Missing Values'': [0, 0, 0, 0, 0, 0, 0], ''Unique Values'':
  [228, 208, 216, 228, 17, 7, 6]}, ''sample_data'': {''Temperature'': [3068, 3042,
  2600], ''L'': [0.0024, 0.0005, 0.0003], ''R'': [0.17, 0.1542, 0.102], ''A_M'': [16.12,
  16.6, 18.7], ''Color'': [''Red'', ''Red'', ''Red''], ''Spectral_Class'': [''M'',
  ''M'', ''M''], ''Type'': [0, 0, 0]}}}

  <end of data example format>


  <start of data details format>

  Star Type Classification / NASA

  space-and-astronomy

  <end of data details format>


  Given a data format, imagine a chart that visualizes this data as the final output
  you want from the service provider.

  You need to imagine a chart with * Donut chart that utilizes the data format.

  If there are multiple given data formats, imagine a chart with * Donut chart that
  utilizes all the data formats.

  Since you are an amateur user, your instruction will be partially SUBJECTIVE and
  NOT DETAILED.

  Also, refer to the data details to create as practical and realistic instructions
  as possible.

  Instructions must reflect the context of the data.

  To emulate a real-world user your instruction should be 100 in size (word count).

  Your response should ONLY contain the user emulated instruction.

  Do not include anything else.'
1-4. total_chart_types:
- '* Dot plot'
- '* Heatmap'
- '* Violin plot'
- '* Histogram'
- '* Column chart'
- '* Bar chart'
- '* Radar chart'
- '* Stacked bar/column chart'
- '* Pie chart'
- '* Scatter plot'
- '* Donut chart'
- '* Area chart'
- '* Line chart'
- '* Box chart'
- '* Dot plot'
- '* Heatmap'
- '* Violin plot'
- '* Histogram'
- '* Column chart'
- '* Bar chart'
- '* Radar chart'
- '* Stacked bar/column chart'
- '* Pie chart'
- '* Scatter plot'
- '* Donut chart'
2. initial_prompt: !!python/tuple
- Create a donut chart to visualize the distribution of different star "Types" from
  the dataset. Each segment of the donut should represent a unique star type, with
  the size of the segment proportional to the number of stars within that type. Additionally,
  use different colors to differentiate between the star types. Label each segment
  with the type number and percentage of the total. This will help in understanding
  the star classification based on the provided data, making it easier to analyze
  the distribution of various star categories.
- 542
- 445
- 97
