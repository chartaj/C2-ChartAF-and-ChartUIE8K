1-1. selected_chart_types: !!python/tuple
- '* Bar chart

  * Scatter plot

  * Heatmap

  * Pie chart

  * Line chart

  * Histogram

  * Box chart'
- 1116
- 1090
- 26
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list> \n1. Text Annotations:\nDescription: Data-driven\
  \ text annotations display values linked to chart elements, such as data points\
  \ in a scatterplot. They draw attention to specific elements by highlighting their\
  \ values.\nPurpose: When only some elements are annotated, the intent is to focus\
  \ the viewer\u2019s attention on those before examining others.\nOther Uses: Non-data-driven\
  \ annotations can provide context, orientation, or editorial comments.\n\n3. Highlights:\n\
  Description: Highlights modify the appearance of chart elements (e.g., size, color)\
  \ to emphasize or reduce their importance.\nPurpose: Used to distinguish certain\
  \ elements from others, making them stand out visually\n<end of the annotation list>"
- 933
- 794
- 139
1-3. asking_user_emulator_for_initial_prompt: 'You are an expert user emulator.


  <start of data example format>

  {''../Extra_datas/data/84.csv'': {''summary'': {''Column'': [''ph'', ''Hardness'',
  ''Solids'', ''Chloramines'', ''Sulfate'', ''Conductivity'', ''Organic_carbon'',
  ''Trihalomethanes'', ''Turbidity'', ''Potability''], ''Data Type'': [dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64''),
  dtype(''int64'')], ''Missing Values'': [491, 0, 0, 0, 781, 0, 0, 162, 0, 0], ''Unique
  Values'': [2785, 3276, 3276, 3276, 2495, 3276, 3276, 3114, 3276, 2]}, ''sample_data'':
  {''ph'': [nan, 3.71608007538699, 8.099124189298397], ''Hardness'': [204.8904554713363,
  129.42292051494425, 224.23625939355776], ''Solids'': [20791.318980747023, 18630.057857970347,
  19909.541732292393], ''Chloramines'': [7.300211873184757, 6.635245883862, 9.275883602694089],
  ''Sulfate'': [368.51644134980336, nan, nan], ''Conductivity'': [564.3086541722439,
  592.8853591348523, 418.6062130644815], ''Organic_carbon'': [10.3797830780847, 15.18001311635726,
  16.868636929550973], ''Trihalomethanes'': [86.9909704615088, 56.32907628451764,
  66.42009251176368], ''Turbidity'': [2.9631353806316407, 4.500656274942408, 3.0559337496641685],
  ''Potability'': [0, 0, 0]}}}

  <end of data example format>


  <start of data details format>

  Water Quality

  energy

  <end of data details format>


  Given a data format, imagine a chart that visualizes this data as the final output
  you want from the service provider.

  You need to imagine a chart with * Bar chart that utilizes the data format.

  If there are multiple given data formats, imagine a chart with * Bar chart that
  utilizes all the data formats.

  Since you are an amateur user, your instruction will be partially SUBJECTIVE and
  NOT DETAILED.

  Also, refer to the data details to create as practical and realistic instructions
  as possible.

  Instructions must reflect the context of the data.

  To emulate a real-world user your instruction should be 100 in size (word count).

  Your response should ONLY contain the user emulated instruction.

  Do not include anything else.'
1-4. total_chart_types:
- '* Heatmap'
- '* Line chart'
- '* Pie chart'
- '* Box chart'
- '* Histogram'
- '* Scatter plot'
- '* Bar chart'
- '* Heatmap'
- '* Line chart'
- '* Pie chart'
- '* Box chart'
- '* Histogram'
- '* Scatter plot'
- '* Bar chart'
2. initial_prompt: !!python/tuple
- Please create a bar chart visualizing the water quality data. The x-axis should
  indicate different water quality parameters like pH, Hardness, Solids, Chloramines,
  Sulfate, Conductivity, Organic Carbon, Trihalomethanes, and Turbidity. The y-axis
  should represent the average values of these parameters. Show different colors for
  potable and non-potable water to distinguish them easily. Include labels, a title,
  and a legend to help understand the chart better. Make sure to account for missing
  values intelligently in your visualization. This will help us understand the overall
  water quality trends in our dataset.
- 793
- 669
- 124
