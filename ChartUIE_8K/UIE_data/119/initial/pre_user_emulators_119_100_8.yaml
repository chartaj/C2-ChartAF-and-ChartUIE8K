1-1. selected_chart_types: !!python/tuple
- '* Bar chart

  * Column chart

  * Grouped bar/column chart

  * Dot plot

  * Heatmap

  * Scatter plot

  * Stacked bar/column chart

  * Area chart

  * Line chart

  * Histogram

  * Box chart'
- 979
- 929
- 50
1-2. selected_annotations: !!python/tuple
- "<start of the annotation list> \n1. Text Annotations:\nDescription: Data-driven\
  \ text annotations display values linked to chart elements, such as data points\
  \ in a scatterplot. They draw attention to specific elements by highlighting their\
  \ values.\nPurpose: When only some elements are annotated, the intent is to focus\
  \ the viewer\u2019s attention on those before examining others.\nOther Uses: Non-data-driven\
  \ annotations can provide context, orientation, or editorial comments.\n3. Highlights:\n\
  Description: Highlights modify the appearance of chart elements (e.g., size, color)\
  \ to emphasize or reduce their importance.\nPurpose: Used to distinguish certain\
  \ elements from others, making them stand out visually\n<end of the annotation list>"
- 773
- 634
- 139
1-3. asking_user_emulator_for_initial_prompt: 'You are an expert user emulator.


  <start of data example format>

  {''../Extra_datas/data/119.csv'': {''summary'': {''Column'': [''Store'', ''Date'',
  ''Weekly_Sales'', ''Holiday_Flag'', ''Temperature'', ''Fuel_Price'', ''CPI'', ''Unemployment''],
  ''Data Type'': [dtype(''int64''), dtype(''O''), dtype(''float64''), dtype(''int64''),
  dtype(''float64''), dtype(''float64''), dtype(''float64''), dtype(''float64'')],
  ''Missing Values'': [0, 0, 0, 0, 0, 0, 0, 0], ''Unique Values'': [45, 143, 6435,
  2, 3528, 892, 2145, 349]}, ''sample_data'': {''Store'': [1, 1, 1], ''Date'': [''05-02-2010'',
  ''12-02-2010'', ''19-02-2010''], ''Weekly_Sales'': [1643690.9, 1641957.44, 1611968.17],
  ''Holiday_Flag'': [0, 1, 0], ''Temperature'': [42.31, 38.51, 39.93], ''Fuel_Price'':
  [2.572, 2.548, 2.514], ''CPI'': [211.0963582, 211.2421698, 211.2891429], ''Unemployment'':
  [8.106, 8.106, 8.106]}}}

  <end of data example format>


  <start of data details format>

  Walmart Sales

  business

  <end of data details format>


  Given a data format, imagine a chart that visualizes this data as the final output
  you want from the service provider.

  You need to imagine a chart with * Stacked bar/column chart that utilizes the data
  format.

  If there are multiple given data formats, imagine a chart with * Stacked bar/column
  chart that utilizes all the data formats.

  Since you are an amateur user, your instruction will be partially SUBJECTIVE and
  NOT DETAILED.

  Also, refer to the data details to create as practical and realistic instructions
  as possible.

  Instructions must reflect the context of the data.

  To emulate a real-world user your instruction should be 100 in size (word count).

  Your response should ONLY contain the user emulated instruction.

  Do not include anything else.'
1-4. total_chart_types:
- '* Column chart'
- '* Histogram'
- '* Area chart'
- '* Box chart'
- '* Line chart'
- '* Heatmap'
- '* Scatter plot'
- '* Bar chart'
- '* Stacked bar/column chart'
- '* Grouped bar/column chart'
- '* Dot plot'
- '* Column chart'
- '* Histogram'
- '* Area chart'
- '* Box chart'
- '* Line chart'
- '* Heatmap'
- '* Scatter plot'
- '* Bar chart'
- '* Stacked bar/column chart'
2. initial_prompt: !!python/tuple
- Please create a stacked column chart for Walmart Sales data. I want to visualize
  the comparison between Weekly Sales, Temperature, and Fuel Price over different
  dates, broken down by Store. Ensure each stack represents a separate Store ID, showing
  the contribution of Weekly Sales, Temperature, and Fuel Price. Highlight holiday
  weeks for better understanding. This should help in identifying any trends or correlations
  between sales, weather, and fuel prices, while considering holiday impacts. The
  unique values can guide the color coding of different stacks. Thanks!
- 618
- 517
- 101
